/*
 * MundiAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MundiAPI.PCL;
using MundiAPI.PCL.Utilities;
using MundiAPI.PCL.Http.Request;
using MundiAPI.PCL.Http.Response;
using MundiAPI.PCL.Http.Client;
using MundiAPI.PCL.Models;

namespace MundiAPI.PCL.Controllers
{
    public partial interface ISubscriptionsController
    {
        /// <summary>
        /// Gets the last charge from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetChargeResponse response from the API call</return>
        Models.GetChargeResponse GetLastSubscriptionCharge(string subscriptionId);

        /// <summary>
        /// Gets the last charge from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetChargeResponse response from the API call</return>
        Task<Models.GetChargeResponse> GetLastSubscriptionChargeAsync(string subscriptionId);

        /// <summary>
        /// Gets all invoices from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.ListInvoicesResponse response from the API call</return>
        Models.ListInvoicesResponse GetSubscriptionInvoices(string subscriptionId);

        /// <summary>
        /// Gets all invoices from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.ListInvoicesResponse response from the API call</return>
        Task<Models.ListInvoicesResponse> GetSubscriptionInvoicesAsync(string subscriptionId);

        /// <summary>
        /// Gets all cycles from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the dynamic response from the API call</return>
        dynamic GetSubscriptionCycles(string subscriptionId);

        /// <summary>
        /// Gets all cycles from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the dynamic response from the API call</return>
        Task<dynamic> GetSubscriptionCyclesAsync(string subscriptionId);

        /// <summary>
        /// Gets a usage
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: item id</param>
        /// <param name="usageId">Required parameter: Usage id</param>
        /// <return>Returns the Models.GetUsageResponse response from the API call</return>
        Models.GetUsageResponse GetUsage(string subscriptionId, string itemId, string usageId);

        /// <summary>
        /// Gets a usage
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: item id</param>
        /// <param name="usageId">Required parameter: Usage id</param>
        /// <return>Returns the Models.GetUsageResponse response from the API call</return>
        Task<Models.GetUsageResponse> GetUsageAsync(string subscriptionId, string itemId, string usageId);

        /// <summary>
        /// Creates a usage
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: Item id</param>
        /// <param name="body">Required parameter: Request for creating a usage</param>
        /// <return>Returns the Models.GetUsageResponse response from the API call</return>
        Models.GetUsageResponse CreateUsage(string subscriptionId, string itemId, Models.CreateUsageRequest body);

        /// <summary>
        /// Creates a usage
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: Item id</param>
        /// <param name="body">Required parameter: Request for creating a usage</param>
        /// <return>Returns the Models.GetUsageResponse response from the API call</return>
        Task<Models.GetUsageResponse> CreateUsageAsync(string subscriptionId, string itemId, Models.CreateUsageRequest body);

        /// <summary>
        /// Updates a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: Item id</param>
        /// <param name="body">Required parameter: Request for updating a subscription item</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Models.GetSubscriptionItemResponse UpdateSubscriptionItem(string subscriptionId, string itemId, Models.UpdateSubscriptionItemRequest body);

        /// <summary>
        /// Updates a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription Id</param>
        /// <param name="itemId">Required parameter: Item id</param>
        /// <param name="body">Required parameter: Request for updating a subscription item</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Task<Models.GetSubscriptionItemResponse> UpdateSubscriptionItemAsync(string subscriptionId, string itemId, Models.UpdateSubscriptionItemRequest body);

        /// <summary>
        /// Gets all subscriptions
        /// </summary>
        /// <return>Returns the Models.ListSubscriptionsResponse response from the API call</return>
        Models.ListSubscriptionsResponse GetSubscriptions();

        /// <summary>
        /// Gets all subscriptions
        /// </summary>
        /// <return>Returns the Models.ListSubscriptionsResponse response from the API call</return>
        Task<Models.ListSubscriptionsResponse> GetSubscriptionsAsync();

        /// <summary>
        /// Updates the credit card from a subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for updating a credit card</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse UpdateSubscriptionCreditCard(Models.UpdateSubscriptionCreditCardRequest body, string subscriptionId);

        /// <summary>
        /// Updates the credit card from a subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for updating a credit card</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> UpdateSubscriptionCreditCardAsync(Models.UpdateSubscriptionCreditCardRequest body, string subscriptionId);

        /// <summary>
        /// Creates a new subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse CreateSubscription(Models.CreateSubscriptionRequest body);

        /// <summary>
        /// Creates a new subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> CreateSubscriptionAsync(Models.CreateSubscriptionRequest body);

        /// <summary>
        /// Creates a new Subscription item
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a subscription item</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Models.GetSubscriptionItemResponse CreateSubscriptionItem(Models.CreateSubscriptionItemRequest body, string subscriptionId);

        /// <summary>
        /// Creates a new Subscription item
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a subscription item</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Task<Models.GetSubscriptionItemResponse> CreateSubscriptionItemAsync(Models.CreateSubscriptionItemRequest body, string subscriptionId);

        /// <summary>
        /// Creates a discount
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a discount</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Models.GetDiscountResponse CreateDiscount(Models.CreateDiscountRequest body, string subscriptionId);

        /// <summary>
        /// Creates a discount
        /// </summary>
        /// <param name="body">Required parameter: Request for creating a discount</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Task<Models.GetDiscountResponse> CreateDiscountAsync(Models.CreateDiscountRequest body, string subscriptionId);

        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse GetSubscription(string subscriptionId);

        /// <summary>
        /// Gets a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> GetSubscriptionAsync(string subscriptionId);

        /// <summary>
        /// Updates the payment method from a subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for updating the payment method from a subscription</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse UpdateSubscriptionPaymentMethod(Models.UpdateSubscriptionPaymentMethodRequest body, string subscriptionId);

        /// <summary>
        /// Updates the payment method from a subscription
        /// </summary>
        /// <param name="body">Required parameter: Request for updating the payment method from a subscription</param>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> UpdateSubscriptionPaymentMethodAsync(Models.UpdateSubscriptionPaymentMethodRequest body, string subscriptionId);

        /// <summary>
        /// Gets a cycle from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="cycleId">Required parameter: Cycle id</param>
        /// <return>Returns the Models.GetPeriodResponse response from the API call</return>
        Models.GetPeriodResponse GetCycle(string subscriptionId, string cycleId);

        /// <summary>
        /// Gets a cycle from a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="cycleId">Required parameter: Cycle id</param>
        /// <return>Returns the Models.GetPeriodResponse response from the API call</return>
        Task<Models.GetPeriodResponse> GetCycleAsync(string subscriptionId, string cycleId);

        /// <summary>
        /// Gets a discount
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="discountId">Required parameter: Discount id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Models.GetDiscountResponse GetDiscount(string subscriptionId, string discountId);

        /// <summary>
        /// Gets a discount
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="discountId">Required parameter: Discount id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Task<Models.GetDiscountResponse> GetDiscountAsync(string subscriptionId, string discountId);

        /// <summary>
        /// Deletes a discount
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="discountId">Required parameter: Discount Id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Models.GetDiscountResponse DeleteDiscount(string subscriptionId, string discountId);

        /// <summary>
        /// Deletes a discount
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="discountId">Required parameter: Discount Id</param>
        /// <return>Returns the Models.GetDiscountResponse response from the API call</return>
        Task<Models.GetDiscountResponse> DeleteDiscountAsync(string subscriptionId, string discountId);

        /// <summary>
        /// Gets a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="itemId">Required parameter: Subscription item id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Models.GetSubscriptionItemResponse GetSubscriptionItem(string subscriptionId, string itemId);

        /// <summary>
        /// Gets a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="itemId">Required parameter: Subscription item id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Task<Models.GetSubscriptionItemResponse> GetSubscriptionItemAsync(string subscriptionId, string itemId);

        /// <summary>
        /// Changes a subscription billing date
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="body">Required parameter: Request for updating the billing day of a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse RescheduleSubscription(string subscriptionId, Models.CreateRescheduleSubscriptionRequest body);

        /// <summary>
        /// Changes a subscription billing date
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="body">Required parameter: Request for updating the billing day of a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> RescheduleSubscriptionAsync(string subscriptionId, Models.CreateRescheduleSubscriptionRequest body);

        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="body">Optional parameter: Request for cancelling a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Models.GetSubscriptionResponse CancelSubscription(string subscriptionId, Models.CreateCancelSubscriptionRequest body = null);

        /// <summary>
        /// Cancels a subscription
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="body">Optional parameter: Request for cancelling a subscription</param>
        /// <return>Returns the Models.GetSubscriptionResponse response from the API call</return>
        Task<Models.GetSubscriptionResponse> CancelSubscriptionAsync(string subscriptionId, Models.CreateCancelSubscriptionRequest body = null);

        /// <summary>
        /// Deletes a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="subscriptionItemId">Required parameter: Subscription item id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Models.GetSubscriptionItemResponse DeleteSubscriptionItem(string subscriptionId, string subscriptionItemId);

        /// <summary>
        /// Deletes a subscription item
        /// </summary>
        /// <param name="subscriptionId">Required parameter: Subscription id</param>
        /// <param name="subscriptionItemId">Required parameter: Subscription item id</param>
        /// <return>Returns the Models.GetSubscriptionItemResponse response from the API call</return>
        Task<Models.GetSubscriptionItemResponse> DeleteSubscriptionItemAsync(string subscriptionId, string subscriptionItemId);

    }
} 